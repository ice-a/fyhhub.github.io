(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{472:function(e,n,r){"use strict";r.r(n);var o=r(5),t=Object(o.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"webpack完整流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack完整流程"}},[this._v("#")]),this._v(" webpack完整流程")]),this._v(" "),n("p",[this._v("1.compile函数，即将开始编译\n2.创建NormalModuleFactory模块工厂\n4.创建Compilation对象\n6.addEntry\n7.模块工厂即将开始create模块\n8.执行 beforeResolve 钩子，即将开始解析模块，如果返回空，可以跳过模块解析\n9. 即将通过 解析工厂 获取 解析器\n10.执行 resolveOptions 钩子，获取解析配置选项，并创建解析器\n11.开始解析文件路径\n12.解析文件，获取文件query参数，获取文件是否是目录或者模块\n13.解析package.json文件内容和路径\n14.处理alias配置，解析真实路径\n15.获取到文件路径以及package.json的一些信息\n16.获取文件需要执行的loader列表\n17.resolver解析loader文件路径\n18.分别获取到post, noraml, pre三种loader的三个数组\n19.即将创建Parser和Generator\n20.创建Parser对象，并执行一些parser对象钩子\n21.创建Generator对象，并执行一些generator钩子\n22.解析完 模块文件和loader的路径以及其他所有文件信息\n23.执行afterResolve钩子 代表已经解析完成\n24.创建NormalModule\n25.建立模块与依赖关系，即将开始构建模块buildModule\n26.开始doBuild，并开始创建loader上下文对象\n27.开始runLoader\n28.loader执行完毕，获取结果\n29.开始编译模块")]),this._v(" "),n("p",[this._v("32.创建ConstDependency，HarmoneyImportSideEffectDependency依赖\n33.当一个被导入变量被使用到时创建HarmonyImportSpecifierDependency依赖\n34.编译和依赖收集完成\n36.执行succeedModule钩子\n37.处理模块依赖\n38.添加模块依赖\n39.重复从  “7” 开始进行\n40.完成模块树创建，执行succeedEntry钩子\n41.执行finishModules钩子")])])}),[],!1,null,null,null);n.default=t.exports}}]);